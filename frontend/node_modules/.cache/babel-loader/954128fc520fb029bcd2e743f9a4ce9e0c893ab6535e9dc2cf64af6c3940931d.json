{"ast":null,"code":"var _jsxFileName = \"/Users/anishgoel/virtualCard/frontend/src/context/AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\n// Default auth state\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultAuthState = {\n  isAuthenticated: false,\n  user: null,\n  loading: true,\n  error: null\n};\n\n// Create auth context\nconst AuthContext = /*#__PURE__*/createContext({\n  authState: defaultAuthState,\n  login: async () => {},\n  logout: () => {}\n});\n\n// Auth provider component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [authState, setAuthState] = useState(defaultAuthState);\n  const navigate = useNavigate();\n\n  // Check for existing auth on mount\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        // Check for stored user in localStorage\n        const storedUser = localStorage.getItem('user');\n        if (storedUser) {\n          const user = JSON.parse(storedUser);\n          setAuthState({\n            isAuthenticated: true,\n            user,\n            loading: false,\n            error: null\n          });\n        } else {\n          setAuthState({\n            ...defaultAuthState,\n            loading: false\n          });\n        }\n      } catch (error) {\n        setAuthState({\n          ...defaultAuthState,\n          loading: false,\n          error: 'Failed to restore session'\n        });\n      }\n    };\n    checkAuth();\n  }, []);\n\n  // Login function\n  const login = async (email, password) => {\n    try {\n      setAuthState({\n        ...authState,\n        loading: true,\n        error: null\n      });\n\n      // Simple validation\n      if (email.trim() === '' || password.trim() === '') {\n        throw new Error('Email and password are required');\n      }\n\n      // Get registered users from localStorage\n      const storedUsers = localStorage.getItem('registeredUsers');\n      const registeredUsers = storedUsers ? JSON.parse(storedUsers) : [];\n\n      // Find user with matching email\n      const foundUser = registeredUsers.find(user => user.email === email);\n      if (!foundUser) {\n        throw new Error('Invalid email or password');\n      }\n\n      // In a real app, you would validate the password hash\n      // For this demo, we're just checking if the user exists\n\n      // Store user in localStorage for session persistence\n      localStorage.setItem('user', JSON.stringify(foundUser));\n\n      // Update auth state\n      setAuthState({\n        isAuthenticated: true,\n        user: foundUser,\n        loading: false,\n        error: null\n      });\n\n      // Navigate to dashboard\n      navigate('/');\n    } catch (error) {\n      setAuthState({\n        ...authState,\n        isAuthenticated: false,\n        user: null,\n        loading: false,\n        error: error.message || 'Login failed'\n      });\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    // Clear localStorage\n    localStorage.removeItem('user');\n\n    // Reset auth state\n    setAuthState({\n      isAuthenticated: false,\n      user: null,\n      loading: false,\n      error: null\n    });\n\n    // Navigate to login page\n    navigate('/login');\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      authState,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook for using auth context\n_s(AuthProvider, \"L5XYm8ysb53E82OOMTyz8/4M3B8=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","defaultAuthState","isAuthenticated","user","loading","error","AuthContext","authState","login","logout","AuthProvider","children","_s","setAuthState","navigate","checkAuth","storedUser","localStorage","getItem","JSON","parse","email","password","trim","Error","storedUsers","registeredUsers","foundUser","find","setItem","stringify","message","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["/Users/anishgoel/virtualCard/frontend/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { User, AuthState } from '../types';\nimport { useNavigate } from 'react-router-dom';\n\n// Default auth state\nconst defaultAuthState: AuthState = {\n  isAuthenticated: false,\n  user: null,\n  loading: true,\n  error: null,\n};\n\n// Create auth context\nconst AuthContext = createContext<{\n  authState: AuthState;\n  login: (email: string, password: string) => Promise<void>;\n  logout: () => void;\n}>({\n  authState: defaultAuthState,\n  login: async () => {},\n  logout: () => {},\n});\n\n// Auth provider component\nexport const AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [authState, setAuthState] = useState<AuthState>(defaultAuthState);\n  const navigate = useNavigate();\n\n  // Check for existing auth on mount\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        // Check for stored user in localStorage\n        const storedUser = localStorage.getItem('user');\n        \n        if (storedUser) {\n          const user = JSON.parse(storedUser) as User;\n          setAuthState({\n            isAuthenticated: true,\n            user,\n            loading: false,\n            error: null,\n          });\n        } else {\n          setAuthState({\n            ...defaultAuthState,\n            loading: false,\n          });\n        }\n      } catch (error) {\n        setAuthState({\n          ...defaultAuthState,\n          loading: false,\n          error: 'Failed to restore session',\n        });\n      }\n    };\n\n    checkAuth();\n  }, []);\n\n  // Login function\n  const login = async (email: string, password: string) => {\n    try {\n      setAuthState({\n        ...authState,\n        loading: true,\n        error: null,\n      });\n\n      // Simple validation\n      if (email.trim() === '' || password.trim() === '') {\n        throw new Error('Email and password are required');\n      }\n\n      // Get registered users from localStorage\n      const storedUsers = localStorage.getItem('registeredUsers');\n      const registeredUsers = storedUsers ? JSON.parse(storedUsers) : [];\n      \n      // Find user with matching email\n      const foundUser = registeredUsers.find((user: User) => user.email === email);\n      \n      if (!foundUser) {\n        throw new Error('Invalid email or password');\n      }\n      \n      // In a real app, you would validate the password hash\n      // For this demo, we're just checking if the user exists\n      \n      // Store user in localStorage for session persistence\n      localStorage.setItem('user', JSON.stringify(foundUser));\n\n      // Update auth state\n      setAuthState({\n        isAuthenticated: true,\n        user: foundUser,\n        loading: false,\n        error: null,\n      });\n\n      // Navigate to dashboard\n      navigate('/');\n    } catch (error: any) {\n      setAuthState({\n        ...authState,\n        isAuthenticated: false,\n        user: null,\n        loading: false,\n        error: error.message || 'Login failed',\n      });\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    // Clear localStorage\n    localStorage.removeItem('user');\n\n    // Reset auth state\n    setAuthState({\n      isAuthenticated: false,\n      user: null,\n      loading: false,\n      error: null,\n    });\n\n    // Navigate to login page\n    navigate('/login');\n  };\n\n  return (\n    <AuthContext.Provider value={{ authState, login, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// Custom hook for using auth context\nexport const useAuth = () => useContext(AuthContext);\n\nexport default AuthContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}