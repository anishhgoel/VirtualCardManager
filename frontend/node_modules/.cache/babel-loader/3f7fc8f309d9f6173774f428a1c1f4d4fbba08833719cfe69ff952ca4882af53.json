{"ast":null,"code":"var _jsxFileName = \"/Users/anishgoel/virtualCard/frontend/src/pages/Register.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Box, Card, CardContent, TextField, Button, Typography, Alert, CircularProgress, Paper, Link as MuiLink, InputAdornment, Tooltip } from '@mui/material';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { useAuth } from '../context/AuthContext';\nimport { checkCardholderAvailability } from '../services/api';\nimport { Check as CheckIcon, Error as ErrorIcon } from '@mui/icons-material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Register = () => {\n  _s();\n  const navigate = useNavigate();\n  const {\n    login\n  } = useAuth();\n  const [formData, setFormData] = useState({\n    username: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n    cardholderId: ''\n  });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Cardholder validation state\n  const [checkingCardholder, setCheckingCardholder] = useState(false);\n  const [cardholderAvailable, setCardholderAvailable] = useState(null);\n  const [cardholderMessage, setCardholderMessage] = useState('');\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value\n    });\n\n    // Reset cardholder validation when the field changes\n    if (name === 'cardholderId') {\n      setCardholderAvailable(null);\n      setCardholderMessage('');\n\n      // Only check availability if it's a valid format\n      if (value && value.startsWith('ich_') && value.length > 7) {\n        validateCardholderId(value);\n      }\n    }\n  };\n\n  // Debounce the cardholder validation to avoid too many API calls\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      if (formData.cardholderId && formData.cardholderId.startsWith('ich_') && formData.cardholderId.length > 7) {\n        validateCardholderId(formData.cardholderId);\n      }\n    }, 800);\n    return () => clearTimeout(timer);\n  }, [formData.cardholderId]);\n  const validateCardholderId = async cardholderId => {\n    try {\n      setCheckingCardholder(true);\n      const result = await checkCardholderAvailability(cardholderId);\n      setCardholderAvailable(result.available);\n      setCardholderMessage(result.message);\n    } catch (err) {\n      setCardholderAvailable(false);\n      setCardholderMessage('Error checking cardholder availability');\n    } finally {\n      setCheckingCardholder(false);\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setError(null);\n\n    // Validate form data\n    if (!formData.username || !formData.email || !formData.password || !formData.cardholderId) {\n      setError('All fields are required');\n      return;\n    }\n    if (formData.password !== formData.confirmPassword) {\n      setError('Passwords do not match');\n      return;\n    }\n    if (!formData.cardholderId.startsWith('ich_')) {\n      setError('Cardholder ID must start with \"ich_\"');\n      return;\n    }\n\n    // Don't allow registration if cardholder ID is not available\n    if (cardholderAvailable === false) {\n      setError('This Cardholder ID is already registered with another account');\n      return;\n    }\n    try {\n      setLoading(true);\n\n      // Use localStorage for now (client-side only), but our API is ready for server-side implementation\n      const storedUsers = localStorage.getItem('registeredUsers');\n      const usersList = storedUsers ? JSON.parse(storedUsers) : [];\n\n      // Create user object\n      const newUser = {\n        id: `user_${Date.now()}`,\n        username: formData.username,\n        email: formData.email,\n        password: formData.password,\n        cardholderId: formData.cardholderId,\n        name: formData.username,\n        createdAt: new Date().toISOString()\n      };\n\n      // Store registered users in localStorage\n      usersList.push(newUser);\n      localStorage.setItem('registeredUsers', JSON.stringify(usersList));\n\n      // Auto-login after registration\n      await login(formData.email, formData.password);\n\n      // Navigate to dashboard\n      navigate('/');\n    } catch (error) {\n      setError(error.message || 'Registration failed');\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      minHeight: 'calc(100vh - 64px)',\n      // Adjust for AppBar\n      padding: 2,\n      backgroundColor: 'background.default'\n    },\n    children: /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 3,\n      sx: {\n        maxWidth: 500,\n        width: '100%'\n      },\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        children: /*#__PURE__*/_jsxDEV(CardContent, {\n          sx: {\n            p: 4\n          },\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              textAlign: 'center',\n              mb: 4\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h4\",\n              component: \"h1\",\n              gutterBottom: true,\n              children: \"Create Account\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body1\",\n              color: \"text.secondary\",\n              children: \"Register to manage your virtual cards\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 13\n          }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n            severity: \"error\",\n            sx: {\n              mb: 3\n            },\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              label: \"Username\",\n              name: \"username\",\n              value: formData.username,\n              onChange: handleChange,\n              fullWidth: true,\n              margin: \"normal\",\n              required: true,\n              disabled: loading\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              label: \"Email\",\n              name: \"email\",\n              type: \"email\",\n              value: formData.email,\n              onChange: handleChange,\n              fullWidth: true,\n              margin: \"normal\",\n              required: true,\n              disabled: loading\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              label: \"Password\",\n              name: \"password\",\n              type: \"password\",\n              value: formData.password,\n              onChange: handleChange,\n              fullWidth: true,\n              margin: \"normal\",\n              required: true,\n              disabled: loading\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              label: \"Confirm Password\",\n              name: \"confirmPassword\",\n              type: \"password\",\n              value: formData.confirmPassword,\n              onChange: handleChange,\n              fullWidth: true,\n              margin: \"normal\",\n              required: true,\n              disabled: loading\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              label: \"Cardholder ID\",\n              name: \"cardholderId\",\n              value: formData.cardholderId,\n              onChange: handleChange,\n              placeholder: \"ich_xxxxxxxxxxxxxxxx\",\n              helperText: cardholderMessage || \"Enter your Stripe Cardholder ID (starts with 'ich_')\",\n              fullWidth: true,\n              margin: \"normal\",\n              required: true,\n              disabled: loading,\n              error: cardholderAvailable === false,\n              InputProps: {\n                endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n                  position: \"end\",\n                  children: [checkingCardholder && /*#__PURE__*/_jsxDEV(CircularProgress, {\n                    size: 20\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 232,\n                    columnNumber: 25\n                  }, this), !checkingCardholder && cardholderAvailable === true && /*#__PURE__*/_jsxDEV(Tooltip, {\n                    title: \"Cardholder ID is available\",\n                    children: /*#__PURE__*/_jsxDEV(CheckIcon, {\n                      color: \"success\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 236,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 235,\n                    columnNumber: 25\n                  }, this), !checkingCardholder && cardholderAvailable === false && /*#__PURE__*/_jsxDEV(Tooltip, {\n                    title: \"Cardholder ID is already in use\",\n                    children: /*#__PURE__*/_jsxDEV(ErrorIcon, {\n                      color: \"error\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 241,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 240,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 230,\n                  columnNumber: 21\n                }, this)\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              variant: \"contained\",\n              fullWidth: true,\n              size: \"large\",\n              disabled: loading || cardholderAvailable === false,\n              sx: {\n                mt: 3\n              },\n              children: loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n                size: 24\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 256,\n                columnNumber: 28\n              }, this) : 'Register'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mt: 3,\n              textAlign: 'center'\n            },\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              children: [\"Already have an account?\", ' ', /*#__PURE__*/_jsxDEV(MuiLink, {\n                component: Link,\n                to: \"/login\",\n                children: \"Sign in\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 263,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 261,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n};\n_s(Register, \"s7P2XzSoWj0DmjBjYd9jh5dB1bQ=\", false, function () {\n  return [useNavigate, useAuth];\n});\n_c = Register;\nexport default Register;\nvar _c;\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"names":["React","useState","useEffect","Box","Card","CardContent","TextField","Button","Typography","Alert","CircularProgress","Paper","Link","MuiLink","InputAdornment","Tooltip","useNavigate","useAuth","checkCardholderAvailability","Check","CheckIcon","Error","ErrorIcon","jsxDEV","_jsxDEV","Register","_s","navigate","login","formData","setFormData","username","email","password","confirmPassword","cardholderId","loading","setLoading","error","setError","checkingCardholder","setCheckingCardholder","cardholderAvailable","setCardholderAvailable","cardholderMessage","setCardholderMessage","handleChange","e","name","value","target","startsWith","length","validateCardholderId","timer","setTimeout","clearTimeout","result","available","message","err","handleSubmit","preventDefault","storedUsers","localStorage","getItem","usersList","JSON","parse","newUser","id","Date","now","createdAt","toISOString","push","setItem","stringify","sx","display","justifyContent","alignItems","minHeight","padding","backgroundColor","children","elevation","maxWidth","width","p","textAlign","mb","variant","component","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","color","severity","onSubmit","label","onChange","fullWidth","margin","required","disabled","type","placeholder","helperText","InputProps","endAdornment","position","size","title","mt","to","_c","$RefreshReg$"],"sources":["/Users/anishgoel/virtualCard/frontend/src/pages/Register.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { \n  Box, \n  Card, \n  CardContent, \n  TextField, \n  Button, \n  Typography, \n  Alert,\n  CircularProgress,\n  Paper,\n  Link as MuiLink,\n  InputAdornment,\n  Tooltip\n} from '@mui/material';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { useAuth } from '../context/AuthContext';\nimport { checkCardholderAvailability, registerUser } from '../services/api';\nimport { Check as CheckIcon, Error as ErrorIcon } from '@mui/icons-material';\n\nconst Register: React.FC = () => {\n  const navigate = useNavigate();\n  const { login } = useAuth();\n  const [formData, setFormData] = useState({\n    username: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n    cardholderId: ''\n  });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  \n  // Cardholder validation state\n  const [checkingCardholder, setCheckingCardholder] = useState(false);\n  const [cardholderAvailable, setCardholderAvailable] = useState<boolean | null>(null);\n  const [cardholderMessage, setCardholderMessage] = useState<string>('');\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value\n    });\n    \n    // Reset cardholder validation when the field changes\n    if (name === 'cardholderId') {\n      setCardholderAvailable(null);\n      setCardholderMessage('');\n      \n      // Only check availability if it's a valid format\n      if (value && value.startsWith('ich_') && value.length > 7) {\n        validateCardholderId(value);\n      }\n    }\n  };\n  \n  // Debounce the cardholder validation to avoid too many API calls\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      if (formData.cardholderId && formData.cardholderId.startsWith('ich_') && formData.cardholderId.length > 7) {\n        validateCardholderId(formData.cardholderId);\n      }\n    }, 800);\n    \n    return () => clearTimeout(timer);\n  }, [formData.cardholderId]);\n  \n  const validateCardholderId = async (cardholderId: string) => {\n    try {\n      setCheckingCardholder(true);\n      const result = await checkCardholderAvailability(cardholderId);\n      setCardholderAvailable(result.available);\n      setCardholderMessage(result.message);\n    } catch (err: any) {\n      setCardholderAvailable(false);\n      setCardholderMessage('Error checking cardholder availability');\n    } finally {\n      setCheckingCardholder(false);\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError(null);\n\n    // Validate form data\n    if (!formData.username || !formData.email || !formData.password || !formData.cardholderId) {\n      setError('All fields are required');\n      return;\n    }\n\n    if (formData.password !== formData.confirmPassword) {\n      setError('Passwords do not match');\n      return;\n    }\n\n    if (!formData.cardholderId.startsWith('ich_')) {\n      setError('Cardholder ID must start with \"ich_\"');\n      return;\n    }\n    \n    // Don't allow registration if cardholder ID is not available\n    if (cardholderAvailable === false) {\n      setError('This Cardholder ID is already registered with another account');\n      return;\n    }\n\n    try {\n      setLoading(true);\n\n      // Use localStorage for now (client-side only), but our API is ready for server-side implementation\n      const storedUsers = localStorage.getItem('registeredUsers');\n      const usersList = storedUsers ? JSON.parse(storedUsers) : [];\n      \n      // Create user object\n      const newUser = {\n        id: `user_${Date.now()}`,\n        username: formData.username,\n        email: formData.email,\n        password: formData.password,\n        cardholderId: formData.cardholderId,\n        name: formData.username,\n        createdAt: new Date().toISOString()\n      };\n\n      // Store registered users in localStorage\n      usersList.push(newUser);\n      localStorage.setItem('registeredUsers', JSON.stringify(usersList));\n\n      // Auto-login after registration\n      await login(formData.email, formData.password);\n\n      // Navigate to dashboard\n      navigate('/');\n    } catch (error: any) {\n      setError(error.message || 'Registration failed');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        minHeight: 'calc(100vh - 64px)', // Adjust for AppBar\n        padding: 2,\n        backgroundColor: 'background.default'\n      }}\n    >\n      <Paper elevation={3} sx={{ maxWidth: 500, width: '100%' }}>\n        <Card>\n          <CardContent sx={{ p: 4 }}>\n            <Box sx={{ textAlign: 'center', mb: 4 }}>\n              <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n                Create Account\n              </Typography>\n              <Typography variant=\"body1\" color=\"text.secondary\">\n                Register to manage your virtual cards\n              </Typography>\n            </Box>\n\n            {error && (\n              <Alert severity=\"error\" sx={{ mb: 3 }}>\n                {error}\n              </Alert>\n            )}\n\n            <form onSubmit={handleSubmit}>\n              <TextField\n                label=\"Username\"\n                name=\"username\"\n                value={formData.username}\n                onChange={handleChange}\n                fullWidth\n                margin=\"normal\"\n                required\n                disabled={loading}\n              />\n              <TextField\n                label=\"Email\"\n                name=\"email\"\n                type=\"email\"\n                value={formData.email}\n                onChange={handleChange}\n                fullWidth\n                margin=\"normal\"\n                required\n                disabled={loading}\n              />\n              <TextField\n                label=\"Password\"\n                name=\"password\"\n                type=\"password\"\n                value={formData.password}\n                onChange={handleChange}\n                fullWidth\n                margin=\"normal\"\n                required\n                disabled={loading}\n              />\n              <TextField\n                label=\"Confirm Password\"\n                name=\"confirmPassword\"\n                type=\"password\"\n                value={formData.confirmPassword}\n                onChange={handleChange}\n                fullWidth\n                margin=\"normal\"\n                required\n                disabled={loading}\n              />\n              <TextField\n                label=\"Cardholder ID\"\n                name=\"cardholderId\"\n                value={formData.cardholderId}\n                onChange={handleChange}\n                placeholder=\"ich_xxxxxxxxxxxxxxxx\"\n                helperText={cardholderMessage || \"Enter your Stripe Cardholder ID (starts with 'ich_')\"}\n                fullWidth\n                margin=\"normal\"\n                required\n                disabled={loading}\n                error={cardholderAvailable === false}\n                InputProps={{\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      {checkingCardholder && (\n                        <CircularProgress size={20} />\n                      )}\n                      {!checkingCardholder && cardholderAvailable === true && (\n                        <Tooltip title=\"Cardholder ID is available\">\n                          <CheckIcon color=\"success\" />\n                        </Tooltip>\n                      )}\n                      {!checkingCardholder && cardholderAvailable === false && (\n                        <Tooltip title=\"Cardholder ID is already in use\">\n                          <ErrorIcon color=\"error\" />\n                        </Tooltip>\n                      )}\n                    </InputAdornment>\n                  )\n                }}\n              />\n              <Button\n                type=\"submit\"\n                variant=\"contained\"\n                fullWidth\n                size=\"large\"\n                disabled={loading || cardholderAvailable === false}\n                sx={{ mt: 3 }}\n              >\n                {loading ? <CircularProgress size={24} /> : 'Register'}\n              </Button>\n            </form>\n\n            <Box sx={{ mt: 3, textAlign: 'center' }}>\n              <Typography variant=\"body2\">\n                Already have an account?{' '}\n                <MuiLink component={Link} to=\"/login\">\n                  Sign in\n                </MuiLink>\n              </Typography>\n            </Box>\n          </CardContent>\n        </Card>\n      </Paper>\n    </Box>\n  );\n};\n\nexport default Register; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SACEC,GAAG,EACHC,IAAI,EACJC,WAAW,EACXC,SAAS,EACTC,MAAM,EACNC,UAAU,EACVC,KAAK,EACLC,gBAAgB,EAChBC,KAAK,EACLC,IAAI,IAAIC,OAAO,EACfC,cAAc,EACdC,OAAO,QACF,eAAe;AACtB,SAASH,IAAI,EAAEI,WAAW,QAAQ,kBAAkB;AACpD,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,2BAA2B,QAAsB,iBAAiB;AAC3E,SAASC,KAAK,IAAIC,SAAS,EAAEC,KAAK,IAAIC,SAAS,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7E,MAAMC,QAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAMC,QAAQ,GAAGX,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAEY;EAAM,CAAC,GAAGX,OAAO,CAAC,CAAC;EAC3B,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAG7B,QAAQ,CAAC;IACvC8B,QAAQ,EAAE,EAAE;IACZC,KAAK,EAAE,EAAE;IACTC,QAAQ,EAAE,EAAE;IACZC,eAAe,EAAE,EAAE;IACnBC,YAAY,EAAE;EAChB,CAAC,CAAC;EACF,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGpC,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACqC,KAAK,EAAEC,QAAQ,CAAC,GAAGtC,QAAQ,CAAgB,IAAI,CAAC;;EAEvD;EACA,MAAM,CAACuC,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGxC,QAAQ,CAAC,KAAK,CAAC;EACnE,MAAM,CAACyC,mBAAmB,EAAEC,sBAAsB,CAAC,GAAG1C,QAAQ,CAAiB,IAAI,CAAC;EACpF,MAAM,CAAC2C,iBAAiB,EAAEC,oBAAoB,CAAC,GAAG5C,QAAQ,CAAS,EAAE,CAAC;EAEtE,MAAM6C,YAAY,GAAIC,CAAsC,IAAK;IAC/D,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAGF,CAAC,CAACG,MAAM;IAChCpB,WAAW,CAAC;MACV,GAAGD,QAAQ;MACX,CAACmB,IAAI,GAAGC;IACV,CAAC,CAAC;;IAEF;IACA,IAAID,IAAI,KAAK,cAAc,EAAE;MAC3BL,sBAAsB,CAAC,IAAI,CAAC;MAC5BE,oBAAoB,CAAC,EAAE,CAAC;;MAExB;MACA,IAAII,KAAK,IAAIA,KAAK,CAACE,UAAU,CAAC,MAAM,CAAC,IAAIF,KAAK,CAACG,MAAM,GAAG,CAAC,EAAE;QACzDC,oBAAoB,CAACJ,KAAK,CAAC;MAC7B;IACF;EACF,CAAC;;EAED;EACA/C,SAAS,CAAC,MAAM;IACd,MAAMoD,KAAK,GAAGC,UAAU,CAAC,MAAM;MAC7B,IAAI1B,QAAQ,CAACM,YAAY,IAAIN,QAAQ,CAACM,YAAY,CAACgB,UAAU,CAAC,MAAM,CAAC,IAAItB,QAAQ,CAACM,YAAY,CAACiB,MAAM,GAAG,CAAC,EAAE;QACzGC,oBAAoB,CAACxB,QAAQ,CAACM,YAAY,CAAC;MAC7C;IACF,CAAC,EAAE,GAAG,CAAC;IAEP,OAAO,MAAMqB,YAAY,CAACF,KAAK,CAAC;EAClC,CAAC,EAAE,CAACzB,QAAQ,CAACM,YAAY,CAAC,CAAC;EAE3B,MAAMkB,oBAAoB,GAAG,MAAOlB,YAAoB,IAAK;IAC3D,IAAI;MACFM,qBAAqB,CAAC,IAAI,CAAC;MAC3B,MAAMgB,MAAM,GAAG,MAAMvC,2BAA2B,CAACiB,YAAY,CAAC;MAC9DQ,sBAAsB,CAACc,MAAM,CAACC,SAAS,CAAC;MACxCb,oBAAoB,CAACY,MAAM,CAACE,OAAO,CAAC;IACtC,CAAC,CAAC,OAAOC,GAAQ,EAAE;MACjBjB,sBAAsB,CAAC,KAAK,CAAC;MAC7BE,oBAAoB,CAAC,wCAAwC,CAAC;IAChE,CAAC,SAAS;MACRJ,qBAAqB,CAAC,KAAK,CAAC;IAC9B;EACF,CAAC;EAED,MAAMoB,YAAY,GAAG,MAAOd,CAAkB,IAAK;IACjDA,CAAC,CAACe,cAAc,CAAC,CAAC;IAClBvB,QAAQ,CAAC,IAAI,CAAC;;IAEd;IACA,IAAI,CAACV,QAAQ,CAACE,QAAQ,IAAI,CAACF,QAAQ,CAACG,KAAK,IAAI,CAACH,QAAQ,CAACI,QAAQ,IAAI,CAACJ,QAAQ,CAACM,YAAY,EAAE;MACzFI,QAAQ,CAAC,yBAAyB,CAAC;MACnC;IACF;IAEA,IAAIV,QAAQ,CAACI,QAAQ,KAAKJ,QAAQ,CAACK,eAAe,EAAE;MAClDK,QAAQ,CAAC,wBAAwB,CAAC;MAClC;IACF;IAEA,IAAI,CAACV,QAAQ,CAACM,YAAY,CAACgB,UAAU,CAAC,MAAM,CAAC,EAAE;MAC7CZ,QAAQ,CAAC,sCAAsC,CAAC;MAChD;IACF;;IAEA;IACA,IAAIG,mBAAmB,KAAK,KAAK,EAAE;MACjCH,QAAQ,CAAC,+DAA+D,CAAC;MACzE;IACF;IAEA,IAAI;MACFF,UAAU,CAAC,IAAI,CAAC;;MAEhB;MACA,MAAM0B,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC;MAC3D,MAAMC,SAAS,GAAGH,WAAW,GAAGI,IAAI,CAACC,KAAK,CAACL,WAAW,CAAC,GAAG,EAAE;;MAE5D;MACA,MAAMM,OAAO,GAAG;QACdC,EAAE,EAAE,QAAQC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;QACxBzC,QAAQ,EAAEF,QAAQ,CAACE,QAAQ;QAC3BC,KAAK,EAAEH,QAAQ,CAACG,KAAK;QACrBC,QAAQ,EAAEJ,QAAQ,CAACI,QAAQ;QAC3BE,YAAY,EAAEN,QAAQ,CAACM,YAAY;QACnCa,IAAI,EAAEnB,QAAQ,CAACE,QAAQ;QACvB0C,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACG,WAAW,CAAC;MACpC,CAAC;;MAED;MACAR,SAAS,CAACS,IAAI,CAACN,OAAO,CAAC;MACvBL,YAAY,CAACY,OAAO,CAAC,iBAAiB,EAAET,IAAI,CAACU,SAAS,CAACX,SAAS,CAAC,CAAC;;MAElE;MACA,MAAMtC,KAAK,CAACC,QAAQ,CAACG,KAAK,EAAEH,QAAQ,CAACI,QAAQ,CAAC;;MAE9C;MACAN,QAAQ,CAAC,GAAG,CAAC;IACf,CAAC,CAAC,OAAOW,KAAU,EAAE;MACnBC,QAAQ,CAACD,KAAK,CAACqB,OAAO,IAAI,qBAAqB,CAAC;IAClD,CAAC,SAAS;MACRtB,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,oBACEb,OAAA,CAACrB,GAAG;IACF2E,EAAE,EAAE;MACFC,OAAO,EAAE,MAAM;MACfC,cAAc,EAAE,QAAQ;MACxBC,UAAU,EAAE,QAAQ;MACpBC,SAAS,EAAE,oBAAoB;MAAE;MACjCC,OAAO,EAAE,CAAC;MACVC,eAAe,EAAE;IACnB,CAAE;IAAAC,QAAA,eAEF7D,OAAA,CAACb,KAAK;MAAC2E,SAAS,EAAE,CAAE;MAACR,EAAE,EAAE;QAAES,QAAQ,EAAE,GAAG;QAAEC,KAAK,EAAE;MAAO,CAAE;MAAAH,QAAA,eACxD7D,OAAA,CAACpB,IAAI;QAAAiF,QAAA,eACH7D,OAAA,CAACnB,WAAW;UAACyE,EAAE,EAAE;YAAEW,CAAC,EAAE;UAAE,CAAE;UAAAJ,QAAA,gBACxB7D,OAAA,CAACrB,GAAG;YAAC2E,EAAE,EAAE;cAAEY,SAAS,EAAE,QAAQ;cAAEC,EAAE,EAAE;YAAE,CAAE;YAAAN,QAAA,gBACtC7D,OAAA,CAAChB,UAAU;cAACoF,OAAO,EAAC,IAAI;cAACC,SAAS,EAAC,IAAI;cAACC,YAAY;cAAAT,QAAA,EAAC;YAErD;cAAAU,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAY,CAAC,eACb1E,OAAA,CAAChB,UAAU;cAACoF,OAAO,EAAC,OAAO;cAACO,KAAK,EAAC,gBAAgB;cAAAd,QAAA,EAAC;YAEnD;cAAAU,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAY,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACV,CAAC,EAEL5D,KAAK,iBACJd,OAAA,CAACf,KAAK;YAAC2F,QAAQ,EAAC,OAAO;YAACtB,EAAE,EAAE;cAAEa,EAAE,EAAE;YAAE,CAAE;YAAAN,QAAA,EACnC/C;UAAK;YAAAyD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACD,CACR,eAED1E,OAAA;YAAM6E,QAAQ,EAAExC,YAAa;YAAAwB,QAAA,gBAC3B7D,OAAA,CAAClB,SAAS;cACRgG,KAAK,EAAC,UAAU;cAChBtD,IAAI,EAAC,UAAU;cACfC,KAAK,EAAEpB,QAAQ,CAACE,QAAS;cACzBwE,QAAQ,EAAEzD,YAAa;cACvB0D,SAAS;cACTC,MAAM,EAAC,QAAQ;cACfC,QAAQ;cACRC,QAAQ,EAAEvE;YAAQ;cAAA2D,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACnB,CAAC,eACF1E,OAAA,CAAClB,SAAS;cACRgG,KAAK,EAAC,OAAO;cACbtD,IAAI,EAAC,OAAO;cACZ4D,IAAI,EAAC,OAAO;cACZ3D,KAAK,EAAEpB,QAAQ,CAACG,KAAM;cACtBuE,QAAQ,EAAEzD,YAAa;cACvB0D,SAAS;cACTC,MAAM,EAAC,QAAQ;cACfC,QAAQ;cACRC,QAAQ,EAAEvE;YAAQ;cAAA2D,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACnB,CAAC,eACF1E,OAAA,CAAClB,SAAS;cACRgG,KAAK,EAAC,UAAU;cAChBtD,IAAI,EAAC,UAAU;cACf4D,IAAI,EAAC,UAAU;cACf3D,KAAK,EAAEpB,QAAQ,CAACI,QAAS;cACzBsE,QAAQ,EAAEzD,YAAa;cACvB0D,SAAS;cACTC,MAAM,EAAC,QAAQ;cACfC,QAAQ;cACRC,QAAQ,EAAEvE;YAAQ;cAAA2D,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACnB,CAAC,eACF1E,OAAA,CAAClB,SAAS;cACRgG,KAAK,EAAC,kBAAkB;cACxBtD,IAAI,EAAC,iBAAiB;cACtB4D,IAAI,EAAC,UAAU;cACf3D,KAAK,EAAEpB,QAAQ,CAACK,eAAgB;cAChCqE,QAAQ,EAAEzD,YAAa;cACvB0D,SAAS;cACTC,MAAM,EAAC,QAAQ;cACfC,QAAQ;cACRC,QAAQ,EAAEvE;YAAQ;cAAA2D,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACnB,CAAC,eACF1E,OAAA,CAAClB,SAAS;cACRgG,KAAK,EAAC,eAAe;cACrBtD,IAAI,EAAC,cAAc;cACnBC,KAAK,EAAEpB,QAAQ,CAACM,YAAa;cAC7BoE,QAAQ,EAAEzD,YAAa;cACvB+D,WAAW,EAAC,sBAAsB;cAClCC,UAAU,EAAElE,iBAAiB,IAAI,sDAAuD;cACxF4D,SAAS;cACTC,MAAM,EAAC,QAAQ;cACfC,QAAQ;cACRC,QAAQ,EAAEvE,OAAQ;cAClBE,KAAK,EAAEI,mBAAmB,KAAK,KAAM;cACrCqE,UAAU,EAAE;gBACVC,YAAY,eACVxF,OAAA,CAACV,cAAc;kBAACmG,QAAQ,EAAC,KAAK;kBAAA5B,QAAA,GAC3B7C,kBAAkB,iBACjBhB,OAAA,CAACd,gBAAgB;oBAACwG,IAAI,EAAE;kBAAG;oBAAAnB,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAE,CAC9B,EACA,CAAC1D,kBAAkB,IAAIE,mBAAmB,KAAK,IAAI,iBAClDlB,OAAA,CAACT,OAAO;oBAACoG,KAAK,EAAC,4BAA4B;oBAAA9B,QAAA,eACzC7D,OAAA,CAACJ,SAAS;sBAAC+E,KAAK,EAAC;oBAAS;sBAAAJ,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAE;kBAAC;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACtB,CACV,EACA,CAAC1D,kBAAkB,IAAIE,mBAAmB,KAAK,KAAK,iBACnDlB,OAAA,CAACT,OAAO;oBAACoG,KAAK,EAAC,iCAAiC;oBAAA9B,QAAA,eAC9C7D,OAAA,CAACF,SAAS;sBAAC6E,KAAK,EAAC;oBAAO;sBAAAJ,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAE;kBAAC;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACpB,CACV;gBAAA;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACa;cAEpB;YAAE;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH,CAAC,eACF1E,OAAA,CAACjB,MAAM;cACLqG,IAAI,EAAC,QAAQ;cACbhB,OAAO,EAAC,WAAW;cACnBY,SAAS;cACTU,IAAI,EAAC,OAAO;cACZP,QAAQ,EAAEvE,OAAO,IAAIM,mBAAmB,KAAK,KAAM;cACnDoC,EAAE,EAAE;gBAAEsC,EAAE,EAAE;cAAE,CAAE;cAAA/B,QAAA,EAEbjD,OAAO,gBAAGZ,OAAA,CAACd,gBAAgB;gBAACwG,IAAI,EAAE;cAAG;gBAAAnB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE,CAAC,GAAG;YAAU;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAChD,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACL,CAAC,eAEP1E,OAAA,CAACrB,GAAG;YAAC2E,EAAE,EAAE;cAAEsC,EAAE,EAAE,CAAC;cAAE1B,SAAS,EAAE;YAAS,CAAE;YAAAL,QAAA,eACtC7D,OAAA,CAAChB,UAAU;cAACoF,OAAO,EAAC,OAAO;cAAAP,QAAA,GAAC,0BACF,EAAC,GAAG,eAC5B7D,OAAA,CAACX,OAAO;gBAACgF,SAAS,EAAEjF,IAAK;gBAACyG,EAAE,EAAC,QAAQ;gBAAAhC,QAAA,EAAC;cAEtC;gBAAAU,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAS,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACA;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACV,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACK;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACV;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV,CAAC;AAACxE,EAAA,CA5PID,QAAkB;EAAA,QACLT,WAAW,EACVC,OAAO;AAAA;AAAAqG,EAAA,GAFrB7F,QAAkB;AA8PxB,eAAeA,QAAQ;AAAC,IAAA6F,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}